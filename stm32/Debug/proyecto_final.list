
proyecto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003224  08003224  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003224  08003224  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003224  08003224  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800322c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08003238  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003238  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b381  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001866  00000000  00000000  0002b3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001773e  00000000  00000000  0002e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d122  00000000  00000000  00045afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a573  00000000  00000000  00052c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd193  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003354  00000000  00000000  000dd1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e4 	.word	0x080031e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080031e4 	.word	0x080031e4

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000150:	f000 fd5c 	bl	8000c0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000154:	f000 f860 	bl	8000218 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000158:	f000 fa82 	bl	8000660 <MX_GPIO_Init>
	MX_TIM1_Init();
 800015c:	f000 f8d0 	bl	8000300 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000160:	f000 f990 	bl	8000484 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000164:	f000 f9e4 	bl	8000530 <MX_TIM3_Init>
	MX_I2C1_Init();
 8000168:	f000 f89c 	bl	80002a4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	// ======================== TIMER 1 ========================
	// Control del motor1 (iniciamos el timer pwm y damos salida a dir1)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800016c:	2108      	movs	r1, #8
 800016e:	4824      	ldr	r0, [pc, #144]	; (8000200 <main+0xb4>)
 8000170:	f002 f840 	bl	80021f4 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000174:	210c      	movs	r1, #12
 8000176:	4822      	ldr	r0, [pc, #136]	; (8000200 <main+0xb4>)
 8000178:	f001 fede 	bl	8001f38 <HAL_TIM_OC_Start>

	// Velocidad inicial de motor1 (DC 90%) --> 100% = 4800
	TIM1->CCR3 = vel_nominal;
 800017c:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 8000180:	4b20      	ldr	r3, [pc, #128]	; (8000204 <main+0xb8>)
 8000182:	63da      	str	r2, [r3, #60]	; 0x3c

	// ======================== TIMER 2 ========================
	// Bajo el bit UIF del registro SR (status register), se setea por hardware e inicialmente esta en 1
	// lo que me levanta de primera el callback del period elapsed
	TIM2->SR &= ~TIM_SR_UIF_Msk;
 8000184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000188:	691b      	ldr	r3, [r3, #16]
 800018a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800018e:	f023 0301 	bic.w	r3, r3, #1
 8000192:	6113      	str	r3, [r2, #16]

	// // ===================== VARIABLES =======================
	cant_cajas = 0;
 8000194:	4b1c      	ldr	r3, [pc, #112]	; (8000208 <main+0xbc>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
	flag = true;
 800019a:	4b1c      	ldr	r3, [pc, #112]	; (800020c <main+0xc0>)
 800019c:	2201      	movs	r2, #1
 800019e:	701a      	strb	r2, [r3, #0]
	estado = pendiente;
 80001a0:	4b1b      	ldr	r3, [pc, #108]	; (8000210 <main+0xc4>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (cant_cajas == 0) {
 80001a6:	4b18      	ldr	r3, [pc, #96]	; (8000208 <main+0xbc>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d10a      	bne.n	80001c4 <main+0x78>
			HAL_GPIO_WritePin(GPIOA, led1_Pin | led2_Pin, 0);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2118      	movs	r1, #24
 80001b2:	4818      	ldr	r0, [pc, #96]	; (8000214 <main+0xc8>)
 80001b4:	f001 f81e 	bl	80011f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led0_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2120      	movs	r1, #32
 80001bc:	4815      	ldr	r0, [pc, #84]	; (8000214 <main+0xc8>)
 80001be:	f001 f819 	bl	80011f4 <HAL_GPIO_WritePin>
 80001c2:	e7f0      	b.n	80001a6 <main+0x5a>
		} else if (cant_cajas == 1) {
 80001c4:	4b10      	ldr	r3, [pc, #64]	; (8000208 <main+0xbc>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d10a      	bne.n	80001e2 <main+0x96>
			HAL_GPIO_WritePin(GPIOA, led0_Pin | led2_Pin, 0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2128      	movs	r1, #40	; 0x28
 80001d0:	4810      	ldr	r0, [pc, #64]	; (8000214 <main+0xc8>)
 80001d2:	f001 f80f 	bl	80011f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led1_Pin, 1);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2110      	movs	r1, #16
 80001da:	480e      	ldr	r0, [pc, #56]	; (8000214 <main+0xc8>)
 80001dc:	f001 f80a 	bl	80011f4 <HAL_GPIO_WritePin>
 80001e0:	e7e1      	b.n	80001a6 <main+0x5a>
		} else if (cant_cajas == 2) {
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0xbc>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b02      	cmp	r3, #2
 80001e8:	d1dd      	bne.n	80001a6 <main+0x5a>
			HAL_GPIO_WritePin(GPIOA, led0_Pin | led1_Pin, 0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2130      	movs	r1, #48	; 0x30
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <main+0xc8>)
 80001f0:	f001 f800 	bl	80011f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led2_Pin, 1);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2108      	movs	r1, #8
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0xc8>)
 80001fa:	f000 fffb 	bl	80011f4 <HAL_GPIO_WritePin>
		if (cant_cajas == 0) {
 80001fe:	e7d2      	b.n	80001a6 <main+0x5a>
 8000200:	2000007c 	.word	0x2000007c
 8000204:	40012c00 	.word	0x40012c00
 8000208:	20000154 	.word	0x20000154
 800020c:	20000158 	.word	0x20000158
 8000210:	20000159 	.word	0x20000159
 8000214:	40010800 	.word	0x40010800

08000218 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 ffd4 	bl	80031d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023a:	2301      	movs	r3, #1
 800023c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f001 f93b 	bl	80014dc <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x58>
		Error_Handler();
 800026c:	f000 fb32 	bl	80008d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fba8 	bl	80019e0 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x82>
		Error_Handler();
 8000296:	f000 fb1d 	bl	80008d4 <Error_Handler>
	}
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002aa:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <MX_I2C1_Init+0x54>)
 80002ac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002b0:	4a12      	ldr	r2, [pc, #72]	; (80002fc <MX_I2C1_Init+0x58>)
 80002b2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002c6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002e2:	f000 ffb7 	bl	8001254 <HAL_I2C_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80002ec:	f000 faf2 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000028 	.word	0x20000028
 80002f8:	40005400 	.word	0x40005400
 80002fc:	000186a0 	.word	0x000186a0

08000300 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b096      	sub	sp, #88	; 0x58
 8000304:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800031e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
 800032e:	615a      	str	r2, [r3, #20]
 8000330:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2220      	movs	r2, #32
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f002 ff4b 	bl	80031d4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800033e:	4b4f      	ldr	r3, [pc, #316]	; (800047c <MX_TIM1_Init+0x17c>)
 8000340:	4a4f      	ldr	r2, [pc, #316]	; (8000480 <MX_TIM1_Init+0x180>)
 8000342:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1;
 8000344:	4b4d      	ldr	r3, [pc, #308]	; (800047c <MX_TIM1_Init+0x17c>)
 8000346:	2201      	movs	r2, #1
 8000348:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b4c      	ldr	r3, [pc, #304]	; (800047c <MX_TIM1_Init+0x17c>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4800;
 8000350:	4b4a      	ldr	r3, [pc, #296]	; (800047c <MX_TIM1_Init+0x17c>)
 8000352:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000356:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b48      	ldr	r3, [pc, #288]	; (800047c <MX_TIM1_Init+0x17c>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800035e:	4b47      	ldr	r3, [pc, #284]	; (800047c <MX_TIM1_Init+0x17c>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000364:	4b45      	ldr	r3, [pc, #276]	; (800047c <MX_TIM1_Init+0x17c>)
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800036a:	4844      	ldr	r0, [pc, #272]	; (800047c <MX_TIM1_Init+0x17c>)
 800036c:	f001 fcbc 	bl	8001ce8 <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0x7a>
		Error_Handler();
 8000376:	f000 faad 	bl	80008d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000384:	4619      	mov	r1, r3
 8000386:	483d      	ldr	r0, [pc, #244]	; (800047c <MX_TIM1_Init+0x17c>)
 8000388:	f002 fab2 	bl	80028f0 <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM1_Init+0x96>
		Error_Handler();
 8000392:	f000 fa9f 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000396:	4839      	ldr	r0, [pc, #228]	; (800047c <MX_TIM1_Init+0x17c>)
 8000398:	f001 fed4 	bl	8002144 <HAL_TIM_PWM_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0xa6>
		Error_Handler();
 80003a2:	f000 fa97 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 80003a6:	4835      	ldr	r0, [pc, #212]	; (800047c <MX_TIM1_Init+0x17c>)
 80003a8:	f001 fd6e 	bl	8001e88 <HAL_TIM_OC_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0xb6>
		Error_Handler();
 80003b2:	f000 fa8f 	bl	80008d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b6:	2300      	movs	r3, #0
 80003b8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80003be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003c2:	4619      	mov	r1, r3
 80003c4:	482d      	ldr	r0, [pc, #180]	; (800047c <MX_TIM1_Init+0x17c>)
 80003c6:	f002 fe1f 	bl	8003008 <HAL_TIMEx_MasterConfigSynchronization>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80003d0:	f000 fa80 	bl	80008d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d4:	2360      	movs	r3, #96	; 0x60
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003dc:	2300      	movs	r3, #0
 80003de:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003e0:	2300      	movs	r3, #0
 80003e2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80003f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f4:	2204      	movs	r2, #4
 80003f6:	4619      	mov	r1, r3
 80003f8:	4820      	ldr	r0, [pc, #128]	; (800047c <MX_TIM1_Init+0x17c>)
 80003fa:	f002 f9bb 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000404:	f000 fa66 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040c:	2208      	movs	r2, #8
 800040e:	4619      	mov	r1, r3
 8000410:	481a      	ldr	r0, [pc, #104]	; (800047c <MX_TIM1_Init+0x17c>)
 8000412:	f002 f9af 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0x120>
			!= HAL_OK) {
		Error_Handler();
 800041c:	f000 fa5a 	bl	80008d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000420:	2350      	movs	r3, #80	; 0x50
 8000422:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000428:	220c      	movs	r2, #12
 800042a:	4619      	mov	r1, r3
 800042c:	4813      	ldr	r0, [pc, #76]	; (800047c <MX_TIM1_Init+0x17c>)
 800042e:	f002 f949 	bl	80026c4 <HAL_TIM_OC_ConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0x13c>
		Error_Handler();
 8000438:	f000 fa4c 	bl	80008d4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000454:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000456:	2300      	movs	r3, #0
 8000458:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4619      	mov	r1, r3
 800045e:	4807      	ldr	r0, [pc, #28]	; (800047c <MX_TIM1_Init+0x17c>)
 8000460:	f002 fe30 	bl	80030c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM1_Init+0x16e>
			!= HAL_OK) {
		Error_Handler();
 800046a:	f000 fa33 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800046e:	4803      	ldr	r0, [pc, #12]	; (800047c <MX_TIM1_Init+0x17c>)
 8000470:	f000 faf2 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 8000474:	bf00      	nop
 8000476:	3758      	adds	r7, #88	; 0x58
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000007c 	.word	0x2000007c
 8000480:	40012c00 	.word	0x40012c00

08000484 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_TIM2_Init+0xa8>)
 80004a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10000;
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <MX_TIM2_Init+0xa8>)
 80004aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80004ae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_TIM2_Init+0xa8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 21600;
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <MX_TIM2_Init+0xa8>)
 80004b8:	f245 4260 	movw	r2, #21600	; 0x5460
 80004bc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_TIM2_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_TIM2_Init+0xa8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80004ca:	4818      	ldr	r0, [pc, #96]	; (800052c <MX_TIM2_Init+0xa8>)
 80004cc:	f001 fc0c 	bl	8001ce8 <HAL_TIM_Base_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0x56>
		Error_Handler();
 80004d6:	f000 f9fd 	bl	80008d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004de:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4619      	mov	r1, r3
 80004e6:	4811      	ldr	r0, [pc, #68]	; (800052c <MX_TIM2_Init+0xa8>)
 80004e8:	f002 fa02 	bl	80028f0 <HAL_TIM_ConfigClockSource>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM2_Init+0x72>
		Error_Handler();
 80004f2:	f000 f9ef 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK) {
 80004f6:	2108      	movs	r1, #8
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <MX_TIM2_Init+0xa8>)
 80004fa:	f001 ff81 	bl	8002400 <HAL_TIM_OnePulse_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000504:	f000 f9e6 	bl	80008d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000508:	2320      	movs	r3, #32
 800050a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000510:	463b      	mov	r3, r7
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_TIM2_Init+0xa8>)
 8000516:	f002 fd77 	bl	8003008 <HAL_TIMEx_MasterConfigSynchronization>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0xa0>
			!= HAL_OK) {
		Error_Handler();
 8000520:	f000 f9d8 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000c4 	.word	0x200000c4

08000530 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b08e      	sub	sp, #56	; 0x38
 8000534:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000544:	f107 0320 	add.w	r3, r7, #32
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
 800055c:	615a      	str	r2, [r3, #20]
 800055e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <MX_TIM3_Init+0x128>)
 8000562:	4a3e      	ldr	r2, [pc, #248]	; (800065c <MX_TIM3_Init+0x12c>)
 8000564:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000566:	4b3c      	ldr	r3, [pc, #240]	; (8000658 <MX_TIM3_Init+0x128>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <MX_TIM3_Init+0x128>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000572:	4b39      	ldr	r3, [pc, #228]	; (8000658 <MX_TIM3_Init+0x128>)
 8000574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000578:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b37      	ldr	r3, [pc, #220]	; (8000658 <MX_TIM3_Init+0x128>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b35      	ldr	r3, [pc, #212]	; (8000658 <MX_TIM3_Init+0x128>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000586:	4834      	ldr	r0, [pc, #208]	; (8000658 <MX_TIM3_Init+0x128>)
 8000588:	f001 fbae 	bl	8001ce8 <HAL_TIM_Base_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000592:	f000 f99f 	bl	80008d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800059c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a0:	4619      	mov	r1, r3
 80005a2:	482d      	ldr	r0, [pc, #180]	; (8000658 <MX_TIM3_Init+0x128>)
 80005a4:	f002 f9a4 	bl	80028f0 <HAL_TIM_ConfigClockSource>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM3_Init+0x82>
		Error_Handler();
 80005ae:	f000 f991 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80005b2:	4829      	ldr	r0, [pc, #164]	; (8000658 <MX_TIM3_Init+0x128>)
 80005b4:	f001 fdc6 	bl	8002144 <HAL_TIM_PWM_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0x92>
		Error_Handler();
 80005be:	f000 f989 	bl	80008d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4619      	mov	r1, r3
 80005d0:	4821      	ldr	r0, [pc, #132]	; (8000658 <MX_TIM3_Init+0x128>)
 80005d2:	f002 fd19 	bl	8003008 <HAL_TIMEx_MasterConfigSynchronization>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80005dc:	f000 f97a 	bl	80008d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	4619      	mov	r1, r3
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <MX_TIM3_Init+0x128>)
 80005f8:	f002 f8bc 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000602:	f000 f967 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2204      	movs	r2, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <MX_TIM3_Init+0x128>)
 800060e:	f002 f8b1 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000618:	f000 f95c 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2208      	movs	r2, #8
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_TIM3_Init+0x128>)
 8000624:	f002 f8a6 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM3_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 800062e:	f000 f951 	bl	80008d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	220c      	movs	r2, #12
 8000636:	4619      	mov	r1, r3
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <MX_TIM3_Init+0x128>)
 800063a:	f002 f89b 	bl	8002774 <HAL_TIM_PWM_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM3_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 8000644:	f000 f946 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <MX_TIM3_Init+0x128>)
 800064a:	f000 fa05 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 800064e:	bf00      	nop
 8000650:	3738      	adds	r7, #56	; 0x38
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000010c 	.word	0x2000010c
 800065c:	40000400 	.word	0x40000400

08000660 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000674:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <MX_GPIO_Init+0x108>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a3b      	ldr	r2, [pc, #236]	; (8000768 <MX_GPIO_Init+0x108>)
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <MX_GPIO_Init+0x108>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <MX_GPIO_Init+0x108>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a35      	ldr	r2, [pc, #212]	; (8000768 <MX_GPIO_Init+0x108>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_GPIO_Init+0x108>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_GPIO_Init+0x108>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <MX_GPIO_Init+0x108>)
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_GPIO_Init+0x108>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, led2_Pin | led1_Pin | led0_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2138      	movs	r1, #56	; 0x38
 80006c0:	482a      	ldr	r0, [pc, #168]	; (800076c <MX_GPIO_Init+0x10c>)
 80006c2:	f000 fd97 	bl	80011f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, led_alerta_Pin | motor2_dir2_Pin | motor2_dir1_Pin,
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80006cc:	4828      	ldr	r0, [pc, #160]	; (8000770 <MX_GPIO_Init+0x110>)
 80006ce:	f000 fd91 	bl	80011f4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : sensor_Pin */
	GPIO_InitStruct.Pin = sensor_Pin;
 80006d2:	2301      	movs	r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_GPIO_Init+0x114>)
 80006d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006da:	2302      	movs	r3, #2
 80006dc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(sensor_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	4821      	ldr	r0, [pc, #132]	; (800076c <MX_GPIO_Init+0x10c>)
 80006e6:	f000 fc01 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : led2_Pin led1_Pin led0_Pin */
	GPIO_InitStruct.Pin = led2_Pin | led1_Pin | led0_Pin;
 80006ea:	2338      	movs	r3, #56	; 0x38
 80006ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	481a      	ldr	r0, [pc, #104]	; (800076c <MX_GPIO_Init+0x10c>)
 8000702:	f000 fbf3 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pins : led_alerta_Pin motor2_dir2_Pin motor2_dir1_Pin */
	GPIO_InitStruct.Pin = led_alerta_Pin | motor2_dir2_Pin | motor2_dir1_Pin;
 8000706:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800070a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4814      	ldr	r0, [pc, #80]	; (8000770 <MX_GPIO_Init+0x110>)
 8000720:	f000 fbe4 	bl	8000eec <HAL_GPIO_Init>

	/*Configure GPIO pin : final_carrera_Pin */
	GPIO_InitStruct.Pin = final_carrera_Pin;
 8000724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000728:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_GPIO_Init+0x114>)
 800072c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(final_carrera_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_GPIO_Init+0x110>)
 800073a:	f000 fbd7 	bl	8000eec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2006      	movs	r0, #6
 8000744:	f000 fb9b 	bl	8000e7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000748:	2006      	movs	r0, #6
 800074a:	f000 fbb4 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f000 fb93 	bl	8000e7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000758:	2028      	movs	r0, #40	; 0x28
 800075a:	f000 fbac 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	40010800 	.word	0x40010800
 8000770:	40010c00 	.word	0x40010c00
 8000774:	10110000 	.word	0x10110000

08000778 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// =================== EXTERNAL INTERRUPT EXTI ===================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	// SENSOR DE CAJA (inicia el proceso)
	if (GPIO_Pin == sensor_Pin) {
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d137      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0x80>
		// En caso de estar libre (estado pendiente) se lleva a cabo la tarea
		// Si ya se esta trabajando en otra caja (estado != pendiente y cant_cajas !=0) entonces
		// solo se sumara una caja a la cola y se para el motor1

		if (cant_cajas == 1 && estado != pendiente) {
 8000788:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <HAL_GPIO_EXTI_Callback+0xcc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10a      	bne.n	80007a6 <HAL_GPIO_EXTI_Callback+0x2e>
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d006      	beq.n	80007a6 <HAL_GPIO_EXTI_Callback+0x2e>
			HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8000798:	210c      	movs	r1, #12
 800079a:	482c      	ldr	r0, [pc, #176]	; (800084c <HAL_GPIO_EXTI_Callback+0xd4>)
 800079c:	f001 fc6e 	bl	800207c <HAL_TIM_OC_Stop>
			cant_cajas = 2;
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <HAL_GPIO_EXTI_Callback+0xcc>)
 80007a2:	2202      	movs	r2, #2
 80007a4:	601a      	str	r2, [r3, #0]
		}

		if (estado == pendiente) {
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <HAL_GPIO_EXTI_Callback+0xd0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d124      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0x80>
			HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80007ae:	210c      	movs	r1, #12
 80007b0:	4826      	ldr	r0, [pc, #152]	; (800084c <HAL_GPIO_EXTI_Callback+0xd4>)
 80007b2:	f001 fbc1 	bl	8001f38 <HAL_TIM_OC_Start>
			HAL_GPIO_WritePin(led_alerta_GPIO_Port, led_alerta_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007bc:	4824      	ldr	r0, [pc, #144]	; (8000850 <HAL_GPIO_EXTI_Callback+0xd8>)
 80007be:	f000 fd19 	bl	80011f4 <HAL_GPIO_WritePin>

			// Activo el motor_2 (en dir1)
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007c2:	2104      	movs	r1, #4
 80007c4:	4821      	ldr	r0, [pc, #132]	; (800084c <HAL_GPIO_EXTI_Callback+0xd4>)
 80007c6:	f001 fd15 	bl	80021f4 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(motor2_dir1_GPIO_Port, motor2_dir1_Pin, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	481f      	ldr	r0, [pc, #124]	; (8000850 <HAL_GPIO_EXTI_Callback+0xd8>)
 80007d2:	f000 fd0f 	bl	80011f4 <HAL_GPIO_WritePin>

			// Pongo motor_1 y motor_2 a la misma velocidad (DC% 65%)
			TIM1->CCR2 = vel_proceso;
 80007d6:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = vel_proceso;
 80007de:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007e4:	63da      	str	r2, [r3, #60]	; 0x3c

			// Inicio el tempo del proceso
			HAL_TIM_Base_Start_IT(&htim2);
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <HAL_GPIO_EXTI_Callback+0xe0>)
 80007e8:	f001 face 	bl	8001d88 <HAL_TIM_Base_Start_IT>

			// Cambio el estado del proceso a tempo (temporizador) y aumento la cantidad de cajas en cola
			estado = tempo;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_GPIO_EXTI_Callback+0xd0>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
			cant_cajas = 1;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_GPIO_EXTI_Callback+0xcc>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
		}

	}

	// FINAL DE CARRERA (posicion de homing)
	if (GPIO_Pin == final_carrera_Pin && estado == fin) {
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007fe:	d11c      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0xc2>
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d118      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0xc2>

		// Al llegar a homing se para el motor2
		HAL_GPIO_WritePin(motor2_dir2_GPIO_Port, motor2_dir2_Pin, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000810:	f000 fcf0 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000814:	2104      	movs	r1, #4
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000818:	f001 fd8e 	bl	8002338 <HAL_TIM_PWM_Stop>

		// Cambio el estado del proceso a pendiente del sensor y restamos una caja de la cola de cajas
		estado = pendiente;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_GPIO_EXTI_Callback+0xd0>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		cant_cajas--;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_GPIO_EXTI_Callback+0xcc>)
 800082a:	6013      	str	r3, [r2, #0]

		// Si hay una caja en cola al llegar a homing, entonces se repite el proceso
		if (cant_cajas == 1) {
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_GPIO_EXTI_Callback+0xcc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d102      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0xc2>
			HAL_GPIO_EXTI_Callback(sensor_Pin);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff9f 	bl	8000778 <HAL_GPIO_EXTI_Callback>
		}

	}
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000154 	.word	0x20000154
 8000848:	20000159 	.word	0x20000159
 800084c:	2000007c 	.word	0x2000007c
 8000850:	40010c00 	.word	0x40010c00
 8000854:	40012c00 	.word	0x40012c00
 8000858:	200000c4 	.word	0x200000c4

0800085c <HAL_TIM_PeriodElapsedCallback>:

// ==================== FIN DEL PROCESO (del tempo) ====================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	if (htim == &htim2 && (TIM2->CR1 & ~(TIM_CR1_CEN_Msk))) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d126      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x5e>
 800086c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f023 0301 	bic.w	r3, r3, #1
 8000876:	2b00      	cmp	r3, #0
 8000878:	d01f      	beq.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x5e>
		// Ademas de verificar que el evento se dispare por TIM2, se verifica que el contador este
		// deshabilitado, ya que se dispara tambien al llamar a HAL_TIM_Base_Start(&htim2)

		HAL_GPIO_WritePin(led_alerta_GPIO_Port, led_alerta_Pin, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000882:	f000 fcb7 	bl	80011f4 <HAL_GPIO_WritePin>

		// Cambio la direccion de motor_2 (dir1 a dir2)
		HAL_GPIO_WritePin(motor2_dir1_GPIO_Port, motor2_dir1_Pin, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800088e:	f000 fcb1 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor2_dir2_GPIO_Port, motor2_dir2_Pin, 1);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800089a:	f000 fcab 	bl	80011f4 <HAL_GPIO_WritePin>

		// Llevo la velocidad de motor_2 al maximo
		TIM1->CCR3 = vel_max;
 800089e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c

		// motor1 retoma la velocidad inicial (DC 90%)
		TIM1->CCR2 = vel_nominal;
 80008a6:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38

		// Cambio el estado del proceso a fin del tempo e inhabilito el TIM2
		estado = fin;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008b6:	f001 fab9 	bl	8001e2c <HAL_TIM_Base_Stop_IT>
	}

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000c4 	.word	0x200000c4
 80008c8:	40010c00 	.word	0x40010c00
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	20000159 	.word	0x20000159

080008d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_MspInit+0x5c>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <HAL_MspInit+0x5c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_MspInit+0x5c>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_MspInit+0x5c>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_MspInit+0x5c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_MspInit+0x5c>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_MspInit+0x60>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_MspInit+0x60>)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000
 8000940:	40010000 	.word	0x40010000

08000944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <HAL_I2C_MspInit+0x70>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d123      	bne.n	80009ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_I2C_MspInit+0x74>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <HAL_I2C_MspInit+0x74>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_I2C_MspInit+0x74>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800097c:	23c0      	movs	r3, #192	; 0xc0
 800097e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	480b      	ldr	r0, [pc, #44]	; (80009bc <HAL_I2C_MspInit+0x78>)
 8000990:	f000 faac 	bl	8000eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_I2C_MspInit+0x74>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_I2C_MspInit+0x74>)
 800099a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099e:	61d3      	str	r3, [r2, #28]
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_I2C_MspInit+0x74>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010c00 	.word	0x40010c00

080009c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_TIM_Base_MspInit+0x8c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10c      	bne.n	80009ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 80009d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009ea:	e02a      	b.n	8000a42 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f4:	d114      	bne.n	8000a20 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	201c      	movs	r0, #28
 8000a14:	f000 fa33 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a18:	201c      	movs	r0, #28
 8000a1a:	f000 fa4c 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
}
 8000a1e:	e010      	b.n	8000a42 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_TIM_Base_MspInit+0x94>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10b      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_TIM_Base_MspInit+0x90>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40012c00 	.word	0x40012c00
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40000400 	.word	0x40000400

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a2b      	ldr	r2, [pc, #172]	; (8000b20 <HAL_TIM_MspPostInit+0xc8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d119      	bne.n	8000aac <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = motor2_pwm_Pin|motor1_pwm_Pin|motor1_dir_Pin;
 8000a90:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4820      	ldr	r0, [pc, #128]	; (8000b28 <HAL_TIM_MspPostInit+0xd0>)
 8000aa6:	f000 fa21 	bl	8000eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aaa:	e034      	b.n	8000b16 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM3)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <HAL_TIM_MspPostInit+0xd4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12f      	bne.n	8000b16 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_TIM_MspPostInit+0xcc>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo1_Pin|servo2_Pin;
 8000ae6:	23c0      	movs	r3, #192	; 0xc0
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2302      	movs	r3, #2
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0318 	add.w	r3, r7, #24
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <HAL_TIM_MspPostInit+0xd0>)
 8000afa:	f000 f9f7 	bl	8000eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = servo3_Pin|servo4_Pin;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2302      	movs	r3, #2
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0318 	add.w	r3, r7, #24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <HAL_TIM_MspPostInit+0xd8>)
 8000b12:	f000 f9eb 	bl	8000eec <HAL_GPIO_Init>
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40000400 	.word	0x40000400
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 f88d 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_Pin);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fb4c 	bl	8001224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM2_IRQHandler+0x10>)
 8000b96:	f001 fc8c 	bl	80024b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000c4 	.word	0x200000c4

08000ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(final_carrera_Pin);
 8000ba8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bac:	f000 fb3a 	bl	8001224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be6:	f7ff ffe5 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 facf 	bl	800318c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bee:	f7ff faad 	bl	800014c <main>
  bx lr
 8000bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	0800322c 	.word	0x0800322c
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	20000160 	.word	0x20000160

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x28>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f923 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe5a 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f93b 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f903 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000015c 	.word	0x2000015c

08000cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	2000015c 	.word	0x2000015c

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4906      	ldr	r1, [pc, #24]	; (8000d68 <__NVIC_EnableIRQ+0x34>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff90 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff2d 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff42 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff90 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5f 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff35 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b08b      	sub	sp, #44	; 0x2c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	e169      	b.n	80011d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f00:	2201      	movs	r2, #1
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8158 	bne.w	80011ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a9a      	ldr	r2, [pc, #616]	; (800118c <HAL_GPIO_Init+0x2a0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d05e      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f28:	4a98      	ldr	r2, [pc, #608]	; (800118c <HAL_GPIO_Init+0x2a0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d875      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f2e:	4a98      	ldr	r2, [pc, #608]	; (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d058      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f34:	4a96      	ldr	r2, [pc, #600]	; (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d86f      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f3a:	4a96      	ldr	r2, [pc, #600]	; (8001194 <HAL_GPIO_Init+0x2a8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d052      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f40:	4a94      	ldr	r2, [pc, #592]	; (8001194 <HAL_GPIO_Init+0x2a8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d869      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f46:	4a94      	ldr	r2, [pc, #592]	; (8001198 <HAL_GPIO_Init+0x2ac>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d04c      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f4c:	4a92      	ldr	r2, [pc, #584]	; (8001198 <HAL_GPIO_Init+0x2ac>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d863      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f52:	4a92      	ldr	r2, [pc, #584]	; (800119c <HAL_GPIO_Init+0x2b0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d046      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f58:	4a90      	ldr	r2, [pc, #576]	; (800119c <HAL_GPIO_Init+0x2b0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d85d      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d82a      	bhi.n	8000fb8 <HAL_GPIO_Init+0xcc>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d859      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f66:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <HAL_GPIO_Init+0x80>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000fe7 	.word	0x08000fe7
 8000f70:	08000fc1 	.word	0x08000fc1
 8000f74:	08000fd3 	.word	0x08000fd3
 8000f78:	08001015 	.word	0x08001015
 8000f7c:	0800101b 	.word	0x0800101b
 8000f80:	0800101b 	.word	0x0800101b
 8000f84:	0800101b 	.word	0x0800101b
 8000f88:	0800101b 	.word	0x0800101b
 8000f8c:	0800101b 	.word	0x0800101b
 8000f90:	0800101b 	.word	0x0800101b
 8000f94:	0800101b 	.word	0x0800101b
 8000f98:	0800101b 	.word	0x0800101b
 8000f9c:	0800101b 	.word	0x0800101b
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	0800101b 	.word	0x0800101b
 8000fa8:	0800101b 	.word	0x0800101b
 8000fac:	0800101b 	.word	0x0800101b
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	08000fdd 	.word	0x08000fdd
 8000fb8:	4a79      	ldr	r2, [pc, #484]	; (80011a0 <HAL_GPIO_Init+0x2b4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fbe:	e02c      	b.n	800101a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e029      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e024      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e01f      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e01a      	b.n	800101c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e013      	b.n	800101c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	611a      	str	r2, [r3, #16]
          break;
 8001006:	e009      	b.n	800101c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	615a      	str	r2, [r3, #20]
          break;
 8001012:	e003      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x130>
          break;
 800101a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2bff      	cmp	r3, #255	; 0xff
 8001020:	d801      	bhi.n	8001026 <HAL_GPIO_Init+0x13a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	e001      	b.n	800102a <HAL_GPIO_Init+0x13e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3304      	adds	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	2bff      	cmp	r3, #255	; 0xff
 8001030:	d802      	bhi.n	8001038 <HAL_GPIO_Init+0x14c>
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x152>
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	3b08      	subs	r3, #8
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	210f      	movs	r1, #15
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	401a      	ands	r2, r3
 8001050:	6a39      	ldr	r1, [r7, #32]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80b1 	beq.w	80011ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106c:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a4c      	ldr	r2, [pc, #304]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001084:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_GPIO_Init+0x2bc>)
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a40      	ldr	r2, [pc, #256]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d013      	beq.n	80010d8 <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3f      	ldr	r2, [pc, #252]	; (80011b0 <HAL_GPIO_Init+0x2c4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00d      	beq.n	80010d4 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <HAL_GPIO_Init+0x2c8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1e4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <HAL_GPIO_Init+0x2cc>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_GPIO_Init+0x1e0>
 80010c8:	2303      	movs	r3, #3
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d8:	2300      	movs	r3, #0
 80010da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ea:	492f      	ldr	r1, [pc, #188]	; (80011a8 <HAL_GPIO_Init+0x2bc>)
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	492c      	ldr	r1, [pc, #176]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	4928      	ldr	r1, [pc, #160]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800111c:	4013      	ands	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4922      	ldr	r1, [pc, #136]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	43db      	mvns	r3, r3
 8001142:	491e      	ldr	r1, [pc, #120]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001144:	4013      	ands	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	4918      	ldr	r1, [pc, #96]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4914      	ldr	r1, [pc, #80]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800116c:	4013      	ands	r3, r2
 800116e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d021      	beq.n	80011c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	490e      	ldr	r1, [pc, #56]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	60cb      	str	r3, [r1, #12]
 8001188:	e021      	b.n	80011ce <HAL_GPIO_Init+0x2e2>
 800118a:	bf00      	nop
 800118c:	10320000 	.word	0x10320000
 8001190:	10310000 	.word	0x10310000
 8001194:	10220000 	.word	0x10220000
 8001198:	10210000 	.word	0x10210000
 800119c:	10120000 	.word	0x10120000
 80011a0:	10110000 	.word	0x10110000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40011400 	.word	0x40011400
 80011bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_GPIO_Init+0x304>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	4909      	ldr	r1, [pc, #36]	; (80011f0 <HAL_GPIO_Init+0x304>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	3301      	adds	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f47f ae8e 	bne.w	8000f00 <HAL_GPIO_Init+0x14>
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	372c      	adds	r7, #44	; 0x2c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	611a      	str	r2, [r3, #16]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fa98 	bl	8000778 <HAL_GPIO_EXTI_Callback>
  }
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e12b      	b.n	80014be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fb62 	bl	8000944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2224      	movs	r2, #36	; 0x24
 8001284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012b8:	f000 fce4 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 80012bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a81      	ldr	r2, [pc, #516]	; (80014c8 <HAL_I2C_Init+0x274>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d807      	bhi.n	80012d8 <HAL_I2C_Init+0x84>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a80      	ldr	r2, [pc, #512]	; (80014cc <HAL_I2C_Init+0x278>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	bf94      	ite	ls
 80012d0:	2301      	movls	r3, #1
 80012d2:	2300      	movhi	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	e006      	b.n	80012e6 <HAL_I2C_Init+0x92>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a7d      	ldr	r2, [pc, #500]	; (80014d0 <HAL_I2C_Init+0x27c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	bf94      	ite	ls
 80012e0:	2301      	movls	r3, #1
 80012e2:	2300      	movhi	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0e7      	b.n	80014be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4a78      	ldr	r2, [pc, #480]	; (80014d4 <HAL_I2C_Init+0x280>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0c9b      	lsrs	r3, r3, #18
 80012f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	430a      	orrs	r2, r1
 800130c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_I2C_Init+0x274>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d802      	bhi.n	8001328 <HAL_I2C_Init+0xd4>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3301      	adds	r3, #1
 8001326:	e009      	b.n	800133c <HAL_I2C_Init+0xe8>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	4a69      	ldr	r2, [pc, #420]	; (80014d8 <HAL_I2C_Init+0x284>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	099b      	lsrs	r3, r3, #6
 800133a:	3301      	adds	r3, #1
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	430b      	orrs	r3, r1
 8001342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800134e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	495c      	ldr	r1, [pc, #368]	; (80014c8 <HAL_I2C_Init+0x274>)
 8001358:	428b      	cmp	r3, r1
 800135a:	d819      	bhi.n	8001390 <HAL_I2C_Init+0x13c>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1e59      	subs	r1, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fbb1 f3f3 	udiv	r3, r1, r3
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001370:	400b      	ands	r3, r1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00a      	beq.n	800138c <HAL_I2C_Init+0x138>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e59      	subs	r1, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fbb1 f3f3 	udiv	r3, r1, r3
 8001384:	3301      	adds	r3, #1
 8001386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138a:	e051      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 800138c:	2304      	movs	r3, #4
 800138e:	e04f      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d111      	bne.n	80013bc <HAL_I2C_Init+0x168>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1e58      	subs	r0, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	440b      	add	r3, r1
 80013a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	e012      	b.n	80013e2 <HAL_I2C_Init+0x18e>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1e58      	subs	r0, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	0099      	lsls	r1, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Init+0x196>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e022      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10e      	bne.n	8001410 <HAL_I2C_Init+0x1bc>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1e58      	subs	r0, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6859      	ldr	r1, [r3, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	440b      	add	r3, r1
 8001400:	fbb0 f3f3 	udiv	r3, r0, r3
 8001404:	3301      	adds	r3, #1
 8001406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140e:	e00f      	b.n	8001430 <HAL_I2C_Init+0x1dc>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	0099      	lsls	r1, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	fbb0 f3f3 	udiv	r3, r0, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	6809      	ldr	r1, [r1, #0]
 8001434:	4313      	orrs	r3, r2
 8001436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69da      	ldr	r2, [r3, #28]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800145e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6911      	ldr	r1, [r2, #16]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68d2      	ldr	r2, [r2, #12]
 800146a:	4311      	orrs	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	430b      	orrs	r3, r1
 8001472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	000186a0 	.word	0x000186a0
 80014cc:	001e847f 	.word	0x001e847f
 80014d0:	003d08ff 	.word	0x003d08ff
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	10624dd3 	.word	0x10624dd3

080014dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e272      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8087 	beq.w	800160a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b04      	cmp	r3, #4
 8001506:	d00c      	beq.n	8001522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001508:	4b8f      	ldr	r3, [pc, #572]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b08      	cmp	r3, #8
 8001512:	d112      	bne.n	800153a <HAL_RCC_OscConfig+0x5e>
 8001514:	4b8c      	ldr	r3, [pc, #560]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d10b      	bne.n	800153a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d06c      	beq.n	8001608 <HAL_RCC_OscConfig+0x12c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d168      	bne.n	8001608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e24c      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x76>
 8001544:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a7f      	ldr	r2, [pc, #508]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e02e      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x98>
 800155a:	4b7b      	ldr	r3, [pc, #492]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a7a      	ldr	r2, [pc, #488]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b78      	ldr	r3, [pc, #480]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a77      	ldr	r2, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0xbc>
 800157e:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a71      	ldr	r2, [pc, #452]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001598:	4b6b      	ldr	r3, [pc, #428]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a6a      	ldr	r2, [pc, #424]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a67      	ldr	r2, [pc, #412]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb80 	bl	8000cbc <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fb7c 	bl	8000cbc <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e200      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xe4>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb6c 	bl	8000cbc <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb68 	bl	8000cbc <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1ec      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x10c>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001616:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b08      	cmp	r3, #8
 800162c:	d11c      	bne.n	8001668 <HAL_RCC_OscConfig+0x18c>
 800162e:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d116      	bne.n	8001668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x176>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e1c0      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4939      	ldr	r1, [pc, #228]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	e03a      	b.n	80016de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_RCC_OscConfig+0x270>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fb21 	bl	8000cbc <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fb1d 	bl	8000cbc <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1a1      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4927      	ldr	r1, [pc, #156]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_RCC_OscConfig+0x270>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb00 	bl	8000cbc <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fafc 	bl	8000cbc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e180      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d03a      	beq.n	8001760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d019      	beq.n	8001726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_RCC_OscConfig+0x274>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fae0 	bl	8000cbc <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fadc 	bl	8000cbc <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e160      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f000 fac4 	bl	8001cac <RCC_Delay>
 8001724:	e01c      	b.n	8001760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RCC_OscConfig+0x274>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172c:	f7ff fac6 	bl	8000cbc <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001732:	e00f      	b.n	8001754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff fac2 	bl	8000cbc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d908      	bls.n	8001754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e146      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	42420000 	.word	0x42420000
 8001750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1e9      	bne.n	8001734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a6 	beq.w	80018ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10d      	bne.n	800179a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a87      	ldr	r2, [pc, #540]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001796:	2301      	movs	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b82      	ldr	r3, [pc, #520]	; (80019a4 <HAL_RCC_OscConfig+0x4c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d118      	bne.n	80017d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a6:	4b7f      	ldr	r3, [pc, #508]	; (80019a4 <HAL_RCC_OscConfig+0x4c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7e      	ldr	r2, [pc, #504]	; (80019a4 <HAL_RCC_OscConfig+0x4c8>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa83 	bl	8000cbc <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ba:	f7ff fa7f 	bl	8000cbc <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	; 0x64
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e103      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x4c8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x312>
 80017e0:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a6e      	ldr	r2, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	e02d      	b.n	800184a <HAL_RCC_OscConfig+0x36e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x334>
 80017f6:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a69      	ldr	r2, [pc, #420]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a66      	ldr	r2, [pc, #408]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	e01c      	b.n	800184a <HAL_RCC_OscConfig+0x36e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d10c      	bne.n	8001832 <HAL_RCC_OscConfig+0x356>
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a60      	ldr	r2, [pc, #384]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6213      	str	r3, [r2, #32]
 8001824:	4b5e      	ldr	r3, [pc, #376]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a5d      	ldr	r2, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e00b      	b.n	800184a <HAL_RCC_OscConfig+0x36e>
 8001832:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a5a      	ldr	r2, [pc, #360]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a57      	ldr	r2, [pc, #348]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d015      	beq.n	800187e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fa33 	bl	8000cbc <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa2f 	bl	8000cbc <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0b1      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ee      	beq.n	800185a <HAL_RCC_OscConfig+0x37e>
 800187c:	e014      	b.n	80018a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fa1d 	bl	8000cbc <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fa19 	bl	8000cbc <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e09b      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ee      	bne.n	8001886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d105      	bne.n	80018ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ae:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8087 	beq.w	80019d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d061      	beq.n	8001994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d146      	bne.n	8001966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <HAL_RCC_OscConfig+0x4cc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff f9ed 	bl	8000cbc <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f9e9 	bl	8000cbc <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e06d      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d108      	bne.n	8001920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4921      	ldr	r1, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a19      	ldr	r1, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	430b      	orrs	r3, r1
 8001932:	491b      	ldr	r1, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x4cc>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f9bd 	bl	8000cbc <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff f9b9 	bl	8000cbc <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e03d      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x46a>
 8001964:	e035      	b.n	80019d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_RCC_OscConfig+0x4cc>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f9a6 	bl	8000cbc <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f9a2 	bl	8000cbc <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e026      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x498>
 8001992:	e01e      	b.n	80019d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e019      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
 80019a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_OscConfig+0x500>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0d0      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d910      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 0207 	bic.w	r2, r3, #7
 8001a0a:	4965      	ldr	r1, [pc, #404]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d040      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d115      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e073      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06b      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 0203 	bic.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4936      	ldr	r1, [pc, #216]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f8f4 	bl	8000cbc <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff f8f0 	bl	8000cbc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e053      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d210      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 0207 	bic.w	r2, r3, #7
 8001b16:	4922      	ldr	r1, [pc, #136]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f821 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1cc>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f852 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	0800320c 	.word	0x0800320c
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b490      	push	{r4, r7}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xac>)
 8001bbc:	1d3c      	adds	r4, r7, #4
 8001bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bc4:	f240 2301 	movw	r3, #513	; 0x201
 8001bc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d002      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x46>
 8001bf2:	e02b      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bf6:	623b      	str	r3, [r7, #32]
      break;
 8001bf8:	e02b      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	0c9b      	lsrs	r3, r3, #18
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3328      	adds	r3, #40	; 0x28
 8001c04:	443b      	add	r3, r7
 8001c06:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c0a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d012      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0c5b      	lsrs	r3, r3, #17
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	3328      	adds	r3, #40	; 0x28
 8001c22:	443b      	add	r3, r7
 8001c24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c2e:	fb03 f202 	mul.w	r2, r3, r2
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e004      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	623b      	str	r3, [r7, #32]
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c4e:	623b      	str	r3, [r7, #32]
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6a3b      	ldr	r3, [r7, #32]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc90      	pop	{r4, r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	080031fc 	.word	0x080031fc
 8001c64:	40021000 	.word	0x40021000
 8001c68:	007a1200 	.word	0x007a1200
 8001c6c:	003d0900 	.word	0x003d0900

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff2 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	0800321c 	.word	0x0800321c

08001cac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <RCC_Delay+0x34>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <RCC_Delay+0x38>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	0a5b      	lsrs	r3, r3, #9
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cc8:	bf00      	nop
  }
  while (Delay --);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1e5a      	subs	r2, r3, #1
 8001cce:	60fa      	str	r2, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f9      	bne.n	8001cc8 <RCC_Delay+0x1c>
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	10624dd3 	.word	0x10624dd3

08001ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e041      	b.n	8001d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fe56 	bl	80009c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3304      	adds	r3, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f000 feca 	bl	8002ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e03a      	b.n	8001e16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_TIM_Base_Start_IT+0x98>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x58>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d009      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x58>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_TIM_Base_Start_IT+0x9c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x58>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d111      	bne.n	8001e04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d010      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e007      	b.n	8001e14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800

08001e2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10f      	bne.n	8001e74 <HAL_TIM_Base_Stop_IT+0x48>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	f240 4344 	movw	r3, #1092	; 0x444
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_Base_Stop_IT+0x48>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e041      	b.n	8001f1e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f839 	bl	8001f26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 fdfa 	bl	8002ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_TIM_OC_Start+0x24>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e022      	b.n	8001fa2 <HAL_TIM_OC_Start+0x6a>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d109      	bne.n	8001f76 <HAL_TIM_OC_Start+0x3e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e015      	b.n	8001fa2 <HAL_TIM_OC_Start+0x6a>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d109      	bne.n	8001f90 <HAL_TIM_OC_Start+0x58>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e008      	b.n	8001fa2 <HAL_TIM_OC_Start+0x6a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e05e      	b.n	8002068 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <HAL_TIM_OC_Start+0x82>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	e013      	b.n	8001fe2 <HAL_TIM_OC_Start+0xaa>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d104      	bne.n	8001fca <HAL_TIM_OC_Start+0x92>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc8:	e00b      	b.n	8001fe2 <HAL_TIM_OC_Start+0xaa>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d104      	bne.n	8001fda <HAL_TIM_OC_Start+0xa2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	e003      	b.n	8001fe2 <HAL_TIM_OC_Start+0xaa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 ffe8 	bl	8002fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_TIM_OC_Start+0x138>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d107      	bne.n	800200a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_TIM_OC_Start+0x138>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00e      	beq.n	8002032 <HAL_TIM_OC_Start+0xfa>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201c:	d009      	beq.n	8002032 <HAL_TIM_OC_Start+0xfa>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_TIM_OC_Start+0x13c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_TIM_OC_Start+0xfa>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_TIM_OC_Start+0x140>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d111      	bne.n	8002056 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b06      	cmp	r3, #6
 8002042:	d010      	beq.n	8002066 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	e007      	b.n	8002066 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40000400 	.word	0x40000400
 8002078:	40000800 	.word	0x40000800

0800207c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 ff96 	bl	8002fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <HAL_TIM_OC_Stop+0xc4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d117      	bne.n	80020ce <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10f      	bne.n	80020ce <HAL_TIM_OC_Stop+0x52>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	f240 4344 	movw	r3, #1092	; 0x444
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d107      	bne.n	80020ce <HAL_TIM_OC_Stop+0x52>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_TIM_OC_Stop+0x82>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	f240 4344 	movw	r3, #1092	; 0x444
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <HAL_TIM_OC_Stop+0x82>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <HAL_TIM_OC_Stop+0x92>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800210c:	e013      	b.n	8002136 <HAL_TIM_OC_Stop+0xba>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d104      	bne.n	800211e <HAL_TIM_OC_Stop+0xa2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800211c:	e00b      	b.n	8002136 <HAL_TIM_OC_Stop+0xba>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d104      	bne.n	800212e <HAL_TIM_OC_Stop+0xb2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800212c:	e003      	b.n	8002136 <HAL_TIM_OC_Stop+0xba>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40012c00 	.word	0x40012c00

08002144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e041      	b.n	80021da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f839 	bl	80021e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 fc9c 	bl	8002ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_TIM_PWM_Start+0x24>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e022      	b.n	800225e <HAL_TIM_PWM_Start+0x6a>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d109      	bne.n	8002232 <HAL_TIM_PWM_Start+0x3e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e015      	b.n	800225e <HAL_TIM_PWM_Start+0x6a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d109      	bne.n	800224c <HAL_TIM_PWM_Start+0x58>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e008      	b.n	800225e <HAL_TIM_PWM_Start+0x6a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e05e      	b.n	8002324 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_TIM_PWM_Start+0x82>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002274:	e013      	b.n	800229e <HAL_TIM_PWM_Start+0xaa>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d104      	bne.n	8002286 <HAL_TIM_PWM_Start+0x92>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	e00b      	b.n	800229e <HAL_TIM_PWM_Start+0xaa>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d104      	bne.n	8002296 <HAL_TIM_PWM_Start+0xa2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002294:	e003      	b.n	800229e <HAL_TIM_PWM_Start+0xaa>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fe8a 	bl	8002fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_TIM_PWM_Start+0x138>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d107      	bne.n	80022c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_TIM_PWM_Start+0x138>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_TIM_PWM_Start+0xfa>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d009      	beq.n	80022ee <HAL_TIM_PWM_Start+0xfa>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <HAL_TIM_PWM_Start+0x13c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIM_PWM_Start+0xfa>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_TIM_PWM_Start+0x140>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d111      	bne.n	8002312 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d010      	beq.n	8002322 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002310:	e007      	b.n	8002322 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800

08002338 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fe38 	bl	8002fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_PWM_Stop+0xc4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d117      	bne.n	800238a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	f241 1311 	movw	r3, #4369	; 0x1111
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_TIM_PWM_Stop+0x52>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	f240 4344 	movw	r3, #1092	; 0x444
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_TIM_PWM_Stop+0x52>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	f241 1311 	movw	r3, #4369	; 0x1111
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <HAL_TIM_PWM_Stop+0x82>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	f240 4344 	movw	r3, #1092	; 0x444
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_TIM_PWM_Stop+0x82>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Stop+0x92>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c8:	e013      	b.n	80023f2 <HAL_TIM_PWM_Stop+0xba>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Stop+0xa2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d8:	e00b      	b.n	80023f2 <HAL_TIM_PWM_Stop+0xba>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d104      	bne.n	80023ea <HAL_TIM_PWM_Stop+0xb2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	e003      	b.n	80023f2 <HAL_TIM_PWM_Stop+0xba>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40012c00 	.word	0x40012c00

08002400 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e041      	b.n	8002498 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d106      	bne.n	800242e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f839 	bl	80024a0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f000 fb3d 	bl	8002ac0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0208 	bic.w	r2, r2, #8
 8002454:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d122      	bne.n	800250e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d11b      	bne.n	800250e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0202 	mvn.w	r2, #2
 80024de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fac8 	bl	8002a8a <HAL_TIM_IC_CaptureCallback>
 80024fa:	e005      	b.n	8002508 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fabb 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 faca 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d122      	bne.n	8002562 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d11b      	bne.n	8002562 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0204 	mvn.w	r2, #4
 8002532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fa9e 	bl	8002a8a <HAL_TIM_IC_CaptureCallback>
 800254e:	e005      	b.n	800255c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa91 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 faa0 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b08      	cmp	r3, #8
 800256e:	d122      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11b      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0208 	mvn.w	r2, #8
 8002586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2204      	movs	r2, #4
 800258c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa74 	bl	8002a8a <HAL_TIM_IC_CaptureCallback>
 80025a2:	e005      	b.n	80025b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa67 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fa76 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d122      	bne.n	800260a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d11b      	bne.n	800260a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0210 	mvn.w	r2, #16
 80025da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2208      	movs	r2, #8
 80025e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fa4a 	bl	8002a8a <HAL_TIM_IC_CaptureCallback>
 80025f6:	e005      	b.n	8002604 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa3d 	bl	8002a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa4c 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10e      	bne.n	8002636 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f06f 0201 	mvn.w	r2, #1
 800262e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe f913 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002640:	2b80      	cmp	r3, #128	; 0x80
 8002642:	d10e      	bne.n	8002662 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d107      	bne.n	8002662 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800265a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fd8b 	bl	8003178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d10e      	bne.n	800268e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d107      	bne.n	800268e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fa10 	bl	8002aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b20      	cmp	r3, #32
 800269a:	d10e      	bne.n	80026ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d107      	bne.n	80026ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0220 	mvn.w	r2, #32
 80026b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fd56 	bl	8003166 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_TIM_OC_ConfigChannel+0x1a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e046      	b.n	800276c <HAL_TIM_OC_ConfigChannel+0xa8>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d839      	bhi.n	8002760 <HAL_TIM_OC_ConfigChannel+0x9c>
 80026ec:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80026ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f2:	bf00      	nop
 80026f4:	08002729 	.word	0x08002729
 80026f8:	08002761 	.word	0x08002761
 80026fc:	08002761 	.word	0x08002761
 8002700:	08002761 	.word	0x08002761
 8002704:	08002737 	.word	0x08002737
 8002708:	08002761 	.word	0x08002761
 800270c:	08002761 	.word	0x08002761
 8002710:	08002761 	.word	0x08002761
 8002714:	08002745 	.word	0x08002745
 8002718:	08002761 	.word	0x08002761
 800271c:	08002761 	.word	0x08002761
 8002720:	08002761 	.word	0x08002761
 8002724:	08002753 	.word	0x08002753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fa28 	bl	8002b84 <TIM_OC1_SetConfig>
      break;
 8002734:	e015      	b.n	8002762 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fa87 	bl	8002c50 <TIM_OC2_SetConfig>
      break;
 8002742:	e00e      	b.n	8002762 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 faea 	bl	8002d24 <TIM_OC3_SetConfig>
      break;
 8002750:	e007      	b.n	8002762 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fb4d 	bl	8002df8 <TIM_OC4_SetConfig>
      break;
 800275e:	e000      	b.n	8002762 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800278a:	2302      	movs	r3, #2
 800278c:	e0ac      	b.n	80028e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0c      	cmp	r3, #12
 800279a:	f200 809f 	bhi.w	80028dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027d9 	.word	0x080027d9
 80027a8:	080028dd 	.word	0x080028dd
 80027ac:	080028dd 	.word	0x080028dd
 80027b0:	080028dd 	.word	0x080028dd
 80027b4:	08002819 	.word	0x08002819
 80027b8:	080028dd 	.word	0x080028dd
 80027bc:	080028dd 	.word	0x080028dd
 80027c0:	080028dd 	.word	0x080028dd
 80027c4:	0800285b 	.word	0x0800285b
 80027c8:	080028dd 	.word	0x080028dd
 80027cc:	080028dd 	.word	0x080028dd
 80027d0:	080028dd 	.word	0x080028dd
 80027d4:	0800289b 	.word	0x0800289b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f9d0 	bl	8002b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0208 	orr.w	r2, r2, #8
 80027f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0204 	bic.w	r2, r2, #4
 8002802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6999      	ldr	r1, [r3, #24]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	619a      	str	r2, [r3, #24]
      break;
 8002816:	e062      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fa16 	bl	8002c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6999      	ldr	r1, [r3, #24]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	021a      	lsls	r2, r3, #8
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	619a      	str	r2, [r3, #24]
      break;
 8002858:	e041      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fa5f 	bl	8002d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0208 	orr.w	r2, r2, #8
 8002874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0204 	bic.w	r2, r2, #4
 8002884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	61da      	str	r2, [r3, #28]
      break;
 8002898:	e021      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 faa9 	bl	8002df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69d9      	ldr	r1, [r3, #28]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	61da      	str	r2, [r3, #28]
      break;
 80028da:	e000      	b.n	80028de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80028dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIM_ConfigClockSource+0x18>
 8002904:	2302      	movs	r3, #2
 8002906:	e0b3      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x180>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002926:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800292e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002940:	d03e      	beq.n	80029c0 <HAL_TIM_ConfigClockSource+0xd0>
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	f200 8087 	bhi.w	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 800294a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294e:	f000 8085 	beq.w	8002a5c <HAL_TIM_ConfigClockSource+0x16c>
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002956:	d87f      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 8002958:	2b70      	cmp	r3, #112	; 0x70
 800295a:	d01a      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xa2>
 800295c:	2b70      	cmp	r3, #112	; 0x70
 800295e:	d87b      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 8002960:	2b60      	cmp	r3, #96	; 0x60
 8002962:	d050      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x116>
 8002964:	2b60      	cmp	r3, #96	; 0x60
 8002966:	d877      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 8002968:	2b50      	cmp	r3, #80	; 0x50
 800296a:	d03c      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0xf6>
 800296c:	2b50      	cmp	r3, #80	; 0x50
 800296e:	d873      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d058      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x136>
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d86f      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 8002978:	2b30      	cmp	r3, #48	; 0x30
 800297a:	d064      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x156>
 800297c:	2b30      	cmp	r3, #48	; 0x30
 800297e:	d86b      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d060      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x156>
 8002984:	2b20      	cmp	r3, #32
 8002986:	d867      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d05c      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x156>
 800298c:	2b10      	cmp	r3, #16
 800298e:	d05a      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002990:	e062      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f000 faee 	bl	8002f82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
      break;
 80029be:	e04e      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f000 fad7 	bl	8002f82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e2:	609a      	str	r2, [r3, #8]
      break;
 80029e4:	e03b      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 fa4e 	bl	8002e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2150      	movs	r1, #80	; 0x50
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 faa5 	bl	8002f4e <TIM_ITRx_SetConfig>
      break;
 8002a04:	e02b      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 fa6c 	bl	8002ef0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2160      	movs	r1, #96	; 0x60
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fa95 	bl	8002f4e <TIM_ITRx_SetConfig>
      break;
 8002a24:	e01b      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f000 fa2e 	bl	8002e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fa85 	bl	8002f4e <TIM_ITRx_SetConfig>
      break;
 8002a44:	e00b      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f000 fa7c 	bl	8002f4e <TIM_ITRx_SetConfig>
        break;
 8002a56:	e002      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a58:	bf00      	nop
 8002a5a:	e000      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <TIM_Base_SetConfig+0xb8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00b      	beq.n	8002af0 <TIM_Base_SetConfig+0x30>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ade:	d007      	beq.n	8002af0 <TIM_Base_SetConfig+0x30>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <TIM_Base_SetConfig+0xbc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_Base_SetConfig+0x30>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a25      	ldr	r2, [pc, #148]	; (8002b80 <TIM_Base_SetConfig+0xc0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <TIM_Base_SetConfig+0xb8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b10:	d007      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <TIM_Base_SetConfig+0xbc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0x62>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <TIM_Base_SetConfig+0xc0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d108      	bne.n	8002b34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a07      	ldr	r2, [pc, #28]	; (8002b78 <TIM_Base_SetConfig+0xb8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d103      	bne.n	8002b68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	615a      	str	r2, [r3, #20]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800

08002b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f023 0302 	bic.w	r3, r3, #2
 8002bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <TIM_OC1_SetConfig+0xc8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10c      	bne.n	8002bfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0308 	bic.w	r3, r3, #8
 8002be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <TIM_OC1_SetConfig+0xc8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d111      	bne.n	8002c26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	621a      	str	r2, [r3, #32]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00

08002c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f023 0210 	bic.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f023 0320 	bic.w	r3, r3, #32
 8002c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <TIM_OC2_SetConfig+0xd0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10d      	bne.n	8002ccc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <TIM_OC2_SetConfig+0xd0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d113      	bne.n	8002cfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0303 	bic.w	r3, r3, #3
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <TIM_OC3_SetConfig+0xd0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10d      	bne.n	8002d9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <TIM_OC3_SetConfig+0xd0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d113      	bne.n	8002dce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	621a      	str	r2, [r3, #32]
}
 8002de8:	bf00      	nop
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40012c00 	.word	0x40012c00

08002df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	031b      	lsls	r3, r3, #12
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <TIM_OC4_SetConfig+0x98>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d109      	bne.n	8002e6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40012c00 	.word	0x40012c00

08002e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f023 0201 	bic.w	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f023 030a 	bic.w	r3, r3, #10
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	621a      	str	r2, [r3, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 0210 	bic.w	r2, r3, #16
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	031b      	lsls	r3, r3, #12
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	621a      	str	r2, [r3, #32]
}
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f043 0307 	orr.w	r3, r3, #7
 8002f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b087      	sub	sp, #28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	021a      	lsls	r2, r3, #8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	609a      	str	r2, [r3, #8]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1a      	ldr	r2, [r3, #32]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1a      	ldr	r2, [r3, #32]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800301c:	2302      	movs	r3, #2
 800301e:	e046      	b.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00e      	beq.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d009      	beq.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d10c      	bne.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003088:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	4313      	orrs	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800

080030c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030dc:	2302      	movs	r3, #2
 80030de:	e03d      	b.n	800315c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
	...

0800318c <__libc_init_array>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	2600      	movs	r6, #0
 8003190:	4d0c      	ldr	r5, [pc, #48]	; (80031c4 <__libc_init_array+0x38>)
 8003192:	4c0d      	ldr	r4, [pc, #52]	; (80031c8 <__libc_init_array+0x3c>)
 8003194:	1b64      	subs	r4, r4, r5
 8003196:	10a4      	asrs	r4, r4, #2
 8003198:	42a6      	cmp	r6, r4
 800319a:	d109      	bne.n	80031b0 <__libc_init_array+0x24>
 800319c:	f000 f822 	bl	80031e4 <_init>
 80031a0:	2600      	movs	r6, #0
 80031a2:	4d0a      	ldr	r5, [pc, #40]	; (80031cc <__libc_init_array+0x40>)
 80031a4:	4c0a      	ldr	r4, [pc, #40]	; (80031d0 <__libc_init_array+0x44>)
 80031a6:	1b64      	subs	r4, r4, r5
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	42a6      	cmp	r6, r4
 80031ac:	d105      	bne.n	80031ba <__libc_init_array+0x2e>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b4:	4798      	blx	r3
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7ee      	b.n	8003198 <__libc_init_array+0xc>
 80031ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80031be:	4798      	blx	r3
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <__libc_init_array+0x1e>
 80031c4:	08003224 	.word	0x08003224
 80031c8:	08003224 	.word	0x08003224
 80031cc:	08003224 	.word	0x08003224
 80031d0:	08003228 	.word	0x08003228

080031d4 <memset>:
 80031d4:	4603      	mov	r3, r0
 80031d6:	4402      	add	r2, r0
 80031d8:	4293      	cmp	r3, r2
 80031da:	d100      	bne.n	80031de <memset+0xa>
 80031dc:	4770      	bx	lr
 80031de:	f803 1b01 	strb.w	r1, [r3], #1
 80031e2:	e7f9      	b.n	80031d8 <memset+0x4>

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
